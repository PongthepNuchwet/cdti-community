async function followInFeed(e){await socket.emit("follow",{follow_id:e,name:profile.fullName}),FriendRecomSchedule.removeQueueById(e),FriendRecomSchedule.schedule()}async function removeFollowInFeed(e){FriendRecomSchedule.removeQueueById(e),FriendRecomSchedule.schedule()}async function acceptInFeed(e){await socket.emit("accept",{follow_id:e,name:profile.fullName}),FriendReqSchedule.removeQueueById(e),FriendReqSchedule.schedule()}async function removeAcceptInFeed(e){FriendReqSchedule.removeQueueById(e),FriendReqSchedule.schedule()}async function clickMessage(){socket.send(document.getElementById("myMessage").value)}Dropzone.autoDiscover=!1;var socket=io.connect(location.protocol+"//"+document.domain+":"+location.port+"/feeds"),imagePath=[],friend_recommend=[],alertMini=Swal.mixin({toast:!0,position:"top-end",showConfirmButton:!1,timer:3e3,width:"22rem",padding:"0.5rem",timerProgressBar:!0,didOpen:e=>{e.addEventListener("mouseenter",Swal.stopTimer),e.addEventListener("mouseleave",Swal.resumeTimer)}});class Profile{constructor(){this.fullName="",this.email="",this.profile=""}}class FriendRecommendSchedule{constructor(){this.queue=[],this.execute=[],this.count=1,this.countTarget=document.getElementById("friendsRecommend_friends_count"),this.parent=document.getElementById("friendsRecommend_friends")}async Interrupt(e){this.execute.length>0&&this.queue.splice(0,0,this.execute.pop()),this.execute.splice(0,0,e),this.Execute()}async displayCount(){this.countTarget.innerHTML=this.queue.length+this.execute.length}async addFriend(e){let t=!0;for(let n of this.queue.concat(this.execute))if(n.id===e.id){t=!1;break}t&&this.queue.push(e)}addFriends(e){e.length>0&&e.forEach(e=>{this.addFriend(e)})}createElement(e){let t=e.profile;null===t&&(t="");let n=document.createElement("div");n.setAttribute("id",`FriendRecommend_${e.id}`),n.setAttribute("class","friend animate__animated animate__fadeIn"),n.innerHTML=`\n        <div class="profile">\n        <div class="img">\n            <img class="img" src="${t}" alt="">\n        </div>\n        <div class="fullname">${e.fullName}\n            <span>Recommend friends for you</span>\n        </div>\n    </div>\n    <div class="action">\n        <button id="newFriend" onClick="followInFeed('${e.id}');" class="action-add">Follow</button>\n        <button id="newFriend" onClick="removeFollowInFeed('${e.id}');" class="action-remove">Remove</button>\n    </div>`,this.parent.appendChild(n)}displayNone(){this.parent.innerHTML='<div class="none">none</div>'}Execute(){if(this.execute.length>0)for(let e=0;e<this.execute.length;e++)void 0!==this.execute[e]?this.createElement(this.execute[e]):this.displayNone()}schedule(){if(this.removeChild(),this.execute.length<this.count)if(this.queue.length>0||this.execute.length>0){for(let e=0;e<this.count;e++)void 0!==this.queue[0]&&this.execute.push(this.queue.shift());this.Execute()}else this.displayNone();this.displayCount()}removeQueue(){this.execute.shift()}removeQueueById(e){let t=this.execute.filter(t=>t.id!=e);this.execute=t}removeChild(){if(this.parent.children.length>0){let e=this.parent.children.length;for(let t=0;t<e;t++)this.parent.removeChild(this.parent.children[0])}}}class FriendRequiredSchedule{constructor(){this.queue=[],this.execute=[],this.count=2,this.countTarget=document.getElementById("friendsRequired_friends_count"),this.parent=document.getElementById("friendsRequired_friends")}async Interrupt(e){this.queue.splice(0,0,this.execute.pop()),this.execute.splice(0,0,e),this.Execute()}async displayCount(){this.countTarget.innerHTML=this.queue.length+this.execute.length}async addFriend(e){let t=!0;for(let n of this.queue.concat(this.execute))if(n.id===e.id){t=!1;break}t&&this.queue.push(e)}async addFriends(e){e.length>0&&e.forEach(e=>{this.addFriend(e)})}async createElement(e){let t=e.profile;null===t&&(t="");let n=document.createElement("div");n.setAttribute("id",`FriendRequired_${e.id}`),n.setAttribute("class","friend animate__animated animate__fadeIn"),n.innerHTML=`\n        <div class="profile">\n        <div class="img">\n            <img class="img" src="${t}" alt="">\n        </div>\n        <div class="fullname">${e.fullName}\n            <span>wants to add you to friends</span>\n        </div>\n    </div>\n    <div class="action">\n        <button id="newFriend" onClick="acceptInFeed('${e.id}');" class="action-add">Accept</button>\n        <button id="newFriend" onClick="removeAcceptInFeed('${e.id}');" class="action-remove">Remove</button>\n    </div>`,this.parent.appendChild(n)}async displayNone(){this.parent.innerHTML='<div class="none">none</div>'}Execute(){if(this.execute.length>0)for(let e=0;e<this.execute.length;e++)void 0!==this.execute[e]?this.createElement(this.execute[e]):this.displayNone()}schedule(){if(this.removeChild(),this.execute.length<this.count)if(this.queue.length>0||this.execute.length>0){for(let e=0;e<this.count;e++)void 0!==this.queue[0]&&this.execute.push(this.queue.shift());this.Execute()}else this.displayNone();this.displayCount()}removeQueue(){this.execute.shift()}removeQueueById(e){let t=this.execute.filter(t=>t.id!=e);this.execute=t}removeChild(){if(this.parent&&this.parent.children.length>0){let e=this.parent.children.length;for(let t=0;t<e;t++)this.parent.removeChild(this.parent.children[0])}}}class FriendContactsSchedule{constructor(){this.execute=[],this.countTarget=document.getElementById("friendsContacts_friends_count"),this.parent=document.getElementById("friendsContacts_friends")}async displayCount(){this.countTarget.innerHTML=this.execute.length}async addFriend(e){let t=!0;for(let n of this.execute)if(n.id===e.id){t=!1;break}t&&this.execute.push(e)}async addFriends(e){e.length>0&&e.forEach(e=>{this.addFriend(e)})}async createElement(e){let t=e.profile;null===t&&(t="");let n=document.createElement("div");n.setAttribute("id",`FriendContact_${e.id}`),n.setAttribute("class","friend animate__animated animate__fadeIn"),n.innerHTML=`\n    <div class="friend">\n            <div class="profile">\n                <div class="img">\n                    <img class="img" src="${t}" alt="">\n                </div>\n                <div class="fullname">${e.fullName}</div>\n            </div>\n        </div>\n    `,this.parent.appendChild(n)}async displayNone(){this.parent.innerHTML='<div class="none">none</div>'}Execute(){if(this.execute.length>0)for(let e=0;e<this.execute.length;e++)void 0!==this.execute[e]&&this.createElement(this.execute[e]);else this.displayNone()}schedule(){this.removeChild(),this.Execute(),this.displayCount()}removeChild(){if(this.parent.children.length>0){let e=this.parent.children.length;for(let t=0;t<e;t++)this.parent.removeChild(this.parent.children[0])}}}var FriendRecomSchedule=new FriendRecommendSchedule,FriendReqSchedule=new FriendRequiredSchedule,FriendConSchedule=new FriendContactsSchedule,profile=new Profile;let myDropzone=new Dropzone("#myDropzone",{init:function(){dz=this,document.getElementById("newFeed-upload-btn").addEventListener("click",function(e){e.preventDefault(),dz.processQueue()}),this.on("success",async function(e,t){imagePath=t.imgPath}),this.on("queuecomplete",async function(e){socket.emit("newFeed",{imagePath:imagePath,content:document.getElementById("newFeed-content").value}),socket.on("newFeedError",e=>{alertMini.fire({icon:"error",title:"Failed to create feed."})}),socket.on("newFeedSuccess",async e=>{document.getElementById("newFeed-content").value="",this.removeAllFiles(!0),alertMini.fire({icon:"success",title:"Successfully created the feed."})})})},url:"/feeds/upload",autoProcessQueue:!1,addRemoveLinks:!0,uploadMultiple:!0,parallelUploads:30,paramName:"file",maxFilesize:3,acceptedFiles:"image/*",maxFiles:3,dictDefaultMessage:"Drop files here or click to upload.",dictFallbackMessage:"Your browser does not support drag'n'drop file uploads.",dictInvalidFileType:"You can't upload files of this type.",dictFileTooBig:"File is too big {{filesize}}. Max filesize: {{maxFilesize}}MiB.",dictResponseError:"Server error: {{statusCode}}",dictMaxFilesExceeded:"You can't upload any more files.",dictCancelUpload:"Cancel upload",dictRemoveFile:"Remove file",dictCancelUploadConfirmation:"You really want to delete this file?",dictUploadCanceled:"Upload canceled"});var newFeed_upload_btn=document.getElementById("newFeed-upload-btn"),newFeed_content=document.getElementById("newFeed");newFeed_content.addEventListener("mouseover",async()=>{document.getElementById("myDropzone").classList.remove("d-none"),document.getElementById("myDropzone").classList.add("d-block"),document.getElementById("newFeed-upload-btn").classList.add("d-block"),document.getElementById("newFeed-upload-btn").classList.remove("d-none")}),newFeed_content.addEventListener("mouseout",async()=>{document.getElementById("myDropzone").classList.remove("d-block"),document.getElementById("myDropzone").classList.add("d-none"),document.getElementById("newFeed-upload-btn").classList.remove("d-block"),document.getElementById("newFeed-upload-btn").classList.add("d-none")}),socket.on("connect",async e=>{console.log(socket.id)}),socket.on("disconnect",async e=>{"io server disconnect"===e&&socket.connect()}),socket.on("connect_error",async()=>{setTimeout(()=>{socket.connect()},1e3)}),socket.on("message",async e=>{alertMini.fire({text:`Received message : ${e}`})}),socket.on("profile",async e=>{profile.fullName=e[0].fullName,profile.email=e[0].email,profile.profile=e[0].profile}),socket.on("follower",async e=>{alertMini.fire({text:`${e}`})}),socket.on("Accept",async e=>{alertMini.fire({text:`${e}`})}),socket.on("newFollowError",async e=>{alertMini.fire({icon:"error",title:"Failed to Follow."})}),socket.on("newFollowSuccess",async e=>{alertMini.fire({icon:"success",title:"Successfully Follow."})}),socket.on("newAcceptError",async e=>{alertMini.fire({icon:"error",title:"Failed to Accept."})}),socket.on("newAcceptSuccess",async e=>{alertMini.fire({icon:"success",title:"Successfully Accept."})}),socket.on("friend_recommend",async e=>{await FriendRecomSchedule.addFriends(e),await FriendRecomSchedule.schedule()}),socket.on("friend_recommend_interrupt",async e=>{await FriendRecomSchedule.Interrupt(e)}),socket.on("friend_Required",async e=>{await FriendReqSchedule.addFriends(e),await FriendReqSchedule.schedule()}),socket.on("friend_Required_interrupt",async e=>{await FriendReqSchedule.Interrupt(e)}),socket.on("concacts",async e=>{await FriendConSchedule.addFriends(e),await FriendConSchedule.schedule()});